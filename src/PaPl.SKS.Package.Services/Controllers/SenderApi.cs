/*
 * Parcel Logistics Service
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.20.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using PaPl.SKS.Package.Services.Attributes;

using Microsoft.AspNetCore.Authorization;
using PaPl.SKS.Package.Services.DTOs.Models;
using AutoMapper;
using PaPl.SKS.BusinessLogic.Interfaces;
using PaPl.SKS.BusinessLogic;
using PaPl.SKS.DataAccess.Repository;
using PaPl.SKS.DataAccess.Sql;
using Microsoft.Extensions.Logging;
using PaPl.SKS.Package.Services.Exceptions;
using PaPl.SKS.BusinessLogic.Interfaces.Exceptions;
using System.Diagnostics.CodeAnalysis;

namespace PaPl.SKS.Package.Services.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class SenderApiController : ControllerBase
    {
        private ISubmitParcelLogic submitParcelLogic;
        private ILogger<SenderApiController> logger;
        private IMapper mapper;
        /// <summary>
        /// 
        /// </summary>
        /// <param name="_submitParcelLogic"></param>
        /// <param name="_logger"></param>
        /// <param name="_mapper"></param>
        public SenderApiController(ISubmitParcelLogic _submitParcelLogic, ILogger<SenderApiController> _logger, IMapper _mapper)
        {
            submitParcelLogic = _submitParcelLogic;
            logger = _logger;
            mapper = _mapper;
        }

        /// <summary>
        /// Submit a new parcel to the logistics service. 
        /// </summary>
        /// <param name="body"></param>
        /// <response code="201">Successfully submitted the new parcel</response>
        /// <response code="400">The operation failed due to an error.</response>
        [HttpPost]
        [Route("/parcel")]
        [ValidateModelState]
        [SwaggerOperation("SubmitParcel")]
        [SwaggerResponse(statusCode: 201, type: typeof(NewParcelInfo), description: "Successfully submitted the new parcel")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "The operation failed due to an error.")]
        public virtual IActionResult SubmitParcel([FromBody] Parcel body)
        {
            logger.LogInformation("SenderApi SubmitParcel started");
            string trackingId;
            try
            {
                BusinessLogic.Entities.Parcel entitiesParcel = mapper.Map<Parcel, BusinessLogic.Entities.Parcel>(body);

                trackingId = submitParcelLogic.SubmitParcel(entitiesParcel);
                NewParcelInfo info = new();
                info.TrackingId = trackingId;
                logger.LogInformation("SenderApi BL-SubmitParcel executed");
                return new ObjectResult(info);
            }
            catch (LogicException ex)
            {
                logger.LogError(ex.Message);
                
                throw new ServiceException(nameof(SenderApiController),
                                        nameof(SubmitParcel),
                                        "An error occured while submitting parcel",
                                        ex);
            }
            catch (Exception ex)
            {
                logger.LogError(ex.Message);
                throw new ServiceException(nameof(SenderApiController),
                                        nameof(SubmitParcel),
                                        "An error occured while submitting parcel",
                                        ex);
            }
            
            /*
            string exampleJson = null;
            exampleJson = "{\n  \"trackingId\" : \"PYJRB4HZ6\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<NewParcelInfo>(exampleJson)
                        : default(NewParcelInfo);            //TODO: Change the data returned
            return new ObjectResult(example);
            */
        }

        
    }
}
