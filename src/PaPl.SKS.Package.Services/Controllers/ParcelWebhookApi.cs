/*
 * Parcel Logistics Service
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.20.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

using Microsoft.AspNetCore.Authorization;
using PaPl.SKS.Package.Services.Attributes;
using PaPl.SKS.Package.Services.DTOs.Models;
using System.Net.Http;
using System.Threading.Tasks;
using PaPl.SKS.DataAccess.Webhook.Interfaces;
using PaPl.SKS.DataAccess.Entities;
using PaPl.SKS.Package.Services.Exceptions;
using Microsoft.Extensions.Logging;

namespace PaPl.SKS.Package.Services.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ParcelWebhookApiController : ControllerBase
    {
        private readonly IWebhookLogic webhookLogic;
        private ILogger<ParcelWebhookApiController> logger;

        public ParcelWebhookApiController(IWebhookLogic _webhookLogic, ILogger<ParcelWebhookApiController> _logger)
        {
            webhookLogic = _webhookLogic;
            logger = _logger;
        }
        /// <summary>
        /// Get all registered subscriptions for the parcel webhook.
        /// </summary>
        /// <param name="trackingId"></param>
        /// <response code="200">List of webooks for the &#x60;trackingId&#x60;</response>
        /// <response code="404">No parcel found with that tracking ID.</response>
        [HttpGet]
        [Route("/parcel/{trackingId}/webhooks")]
        [ValidateModelState]
        [SwaggerOperation("ListParcelWebhooks")]
        [SwaggerResponse(statusCode: 200, type: typeof(WebhookResponses), description: "List of webooks for the &#x60;trackingId&#x60;")]
        public virtual IActionResult ListParcelWebhooks([FromRoute][Required][RegularExpression("^[A-Z0-9]{9}$")] string trackingId)
        {
            logger.LogDebug("ParcelWebhookApiController ListParcelWebhooks started");
            try
            {
                List<Webhook> allWebhooks = webhookLogic.GetWebhooksWithTrackingId(trackingId);
                logger.LogDebug("ParcelWebhookApiController ListParcelWebhooks get all webhooks with id");
                var result = JsonConvert.SerializeObject(allWebhooks);
                string response = "";
                foreach (var webhook in allWebhooks)
                {
                    WebhookResponse webhookResponse = new();
                    webhookResponse.TrackingId = webhook.TrackingId;
                    webhookResponse.CustomerUrl = webhook.CustomerUrl;
                    webhookResponse.Id = webhook.Id;
                    webhookResponse.CreatedAt = webhook.CreatedAt;
                    response += webhookResponse;
                }
                return new ObjectResult(response);
            }
            catch (Exception ex)
            {
                logger.LogError(ex.Message);
                throw new ServiceException(nameof(SenderApiController),
                                        nameof(ListParcelWebhooks),
                                        "An error occured while listing webhooks",
                                        ex);
            }

        }

        /// <summary>
        /// Subscribe to a webhook notification for the specific parcel.
        /// </summary>
        /// <param name="trackingId"></param>
        /// <param name="url"></param>
        /// <response code="200">Successful response</response>
        /// <response code="404">No parcel found with that tracking ID.</response>
        [HttpPost]
        [Route("/parcel/{trackingId}/webhooks")]
        [ValidateModelState]
        [SwaggerOperation("SubscribeParcelWebhook")]
        [SwaggerResponse(statusCode: 200, type: typeof(WebhookResponse), description: "Successful response")]
        public virtual IActionResult SubscribeParcelWebhookAsync([FromRoute][Required][RegularExpression("^[A-Z0-9]{9}$")] string trackingId, [FromQuery][Required()] string url)
        {
            logger.LogDebug("ParcelWebhookApiController SubscribeParcelWebhookAsync started");

            try
            {
                int id = webhookLogic.Subscribe(trackingId, url);
                logger.LogDebug("ParcelWebhookApiController SubscribeParcelWebhookAsync Subscribe executed");
                WebhookResponse response = new();
                response.TrackingId = trackingId;
                response.CreatedAt = DateTime.Now;
                response.CustomerUrl = url;
                response.Id = id;

                return new ObjectResult(response);
            }
            catch (Exception ex)
            {
                logger.LogError(ex.Message);
                throw new ServiceException(nameof(SenderApiController),
                                        nameof(SubscribeParcelWebhookAsync),
                                        "An error occured subscribing webhook",
                                        ex);
            }

            
        }

        /// <summary>
        /// Remove an existing webhook subscription.
        /// </summary>
        /// <param name="id"></param>
        /// <response code="200">Success</response>
        /// <response code="404">Subscription does not exist.</response>
        [HttpDelete]
        [Route("/parcel/webhooks/{id}")]
        [ValidateModelState]
        [SwaggerOperation("UnsubscribeParcelWebhook")]
        public virtual IActionResult UnsubscribeParcelWebhook([FromRoute][Required] long? id)
        {
            logger.LogDebug("ParcelWebhookApiController UnsubscribeParcelWebhook started");

            try
            {
                int statuscode = webhookLogic.Unsubscribe((long)id);

                return StatusCode(statuscode);
            }
            catch (Exception ex)
            {
                logger.LogError(ex.Message);
                throw new ServiceException(nameof(SenderApiController),
                                        nameof(UnsubscribeParcelWebhook),
                                        "An error occured while unsubscribing parcel",
                                        ex);
            }
        }
    }
}
